//К примеру событие установленно на вложенный елемент , и на его родиеля

const btn = document.querySelector('.btn');
const wrap = document.querySelector('.wrap');

//На кнопку ставить обработик события addEventListener (слушаем)
btn.addEventListener('click', e => {
   // e.stopPropagation();// остановить всплытия событий, при попытке клика события србтает непосредственно для этой кнопки но не сработает на обёрточном блоке 
   console.log('click btn');
});


//Обычные обработчики
wrap.addEventListener('click', e => {
   console.log('click wrap');
});

document.body.addEventListener('click', e => {
   console.log('click body');
});



// Которые уже реагируют на погружение
// Когда обертаный блок ( в данном лучае div с классом wrap) также имееетслушателя событий такого же как вложеный елемент ( произойдет ефект вслытия события  одинаковые собтия на елементе и на родителе , склеются)
wrap.addEventListener('click', e => {
   console.log('click wrap');
}, {capture: true});

document.body.addEventListener('click', e => {
   console.log('click body');
},{capture: true});

// что же такое погружения события? сначало происходить погружение а потом его всплытие ( погружние по умолчанию не отслеживается - мы его не перехватываем ) для того чтобы перехватить обработку события погружения, должны добавить на те же елементы слушатель еще раз и третим параметром в addeventlistener либо true, ли объект в котором свойство capcher установить true ( пример {capture: true} - сначало событие будет на bady потом на wrape а потом на btn - сначало погружение , потом всплытие  )   А что бы отловить и всплытие и погружение , должны повесить на тот же drap и bady уще по одному обработчику только без дополнительнго перехвата погружения , тоесть должны быть обычные обработчики  которые буду реагировать на всплытия и обработчики которые будут реагировать на погружени - тоесть {capture: true});